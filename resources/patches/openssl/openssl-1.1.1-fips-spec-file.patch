--- a/SPECS/openssl.spec	2019-05-11 00:45:45.000000000 +0000
+++ b/SPECS/openssl.spec	2020-01-13 15:16:29.224852120 +0000
@@ -67,17 +67,18 @@
 Patch52: openssl-1.1.1-s390x-update.patch
 Patch53: openssl-1.1.1-fips-crng-test.patch
 Patch54: openssl-1.1.1-regression-fixes.patch
+Patch55: openssl-1.1.1-force-fips-on-init.patch
 
 License: OpenSSL
 Group: System Environment/Libraries
 URL: http://www.openssl.org/
 BuildRequires: gcc
-BuildRequires: coreutils, perl-interpreter, sed, zlib-devel, /usr/bin/cmp
+BuildRequires: coreutils, perl, sed, zlib-devel, /usr/bin/cmp
 BuildRequires: lksctp-tools-devel
 BuildRequires: /usr/bin/rename
 BuildRequires: /usr/bin/pod2man
 BuildRequires: /usr/sbin/sysctl
-BuildRequires: perl(Test::Harness), perl(Test::More), perl(Math::BigInt)
+BuildRequires: perl(Test::Harness), perl(Math::BigInt)
 BuildRequires: perl(Module::Load::Conditional), perl(File::Temp)
 BuildRequires: perl(Time::HiRes)
 Requires: coreutils
@@ -94,7 +95,6 @@
 Group: System Environment/Libraries
 Requires: ca-certificates >= 2008-5
 Requires: crypto-policies >= 20180730
-Recommends: openssl-pkcs11%{?_isa}
 # Needed obsoletes due to the base/lib subpackage split
 Obsoletes: openssl < 1:1.0.1-0.3.beta3
 Obsoletes: openssl-fips < 1:1.0.1e-28
@@ -131,7 +131,7 @@
 %package perl
 Summary: Perl scripts provided with OpenSSL
 Group: Applications/Internet
-Requires: perl-interpreter
+Requires: perl
 Requires: %{name}%{?_isa} = %{epoch}:%{version}-%{release}
 
 %description perl
@@ -177,6 +177,7 @@
 %patch52 -p1 -b .s390x-update
 %patch53 -p1 -b .crng-test
 %patch54 -p1 -b .regression
+%patch55 -p1 -b .force-fips-on-init
 
 
 %build
@@ -243,7 +244,7 @@
 # marked as not requiring an executable stack.
 # Also add -DPURIFY to make using valgrind with openssl easier as we do not
 # want to depend on the uninitialized memory as a source of entropy anyway.
-RPM_OPT_FLAGS="$RPM_OPT_FLAGS -Wa,--noexecstack -Wa,--generate-missing-build-notes=yes -DPURIFY $RPM_LD_FLAGS"
+RPM_OPT_FLAGS="$RPM_OPT_FLAGS -Wa,--noexecstack -Wl,-rpath=/opt/puppetlabs/puppet/lib -DPURIFY $RPM_LD_FLAGS"
 
 export HASHBANGPERL=/usr/bin/perl
 
@@ -252,8 +253,8 @@
 # usable on all platforms.  The Configure script already knows to use -fPIC and
 # RPM_OPT_FLAGS, so we can skip specifiying them here.
 ./Configure \
-	--prefix=%{_prefix} --openssldir=%{_sysconfdir}/pki/tls ${sslflags} \
-	--system-ciphers-file=%{_sysconfdir}/crypto-policies/back-ends/openssl.config \
+	--prefix=%{_prefix} --openssldir=%{_prefix}/ssl ${sslflags} \
+	--system-ciphers-file=%{_prefix}/etc/crypto-policies/back-ends/openssl.config \
 	zlib enable-camellia enable-seed enable-rfc3779 enable-sctp \
 	enable-cms enable-md2 enable-rc5\
 	enable-weak-ssl-ciphers \
@@ -325,14 +326,14 @@
 
 # Install a makefile for generating keys and self-signed certs, and a script
 # for generating them on the fly.
-mkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/pki/tls/certs
+mkdir -p $RPM_BUILD_ROOT%{_prefix}/ssl/certs
 install -m644 %{SOURCE2} $RPM_BUILD_ROOT%{_pkgdocdir}/Makefile.certificate
 install -m755 %{SOURCE6} $RPM_BUILD_ROOT%{_bindir}/make-dummy-cert
 install -m755 %{SOURCE7} $RPM_BUILD_ROOT%{_bindir}/renew-dummy-cert
 
 # Move runable perl scripts to bindir
-mv $RPM_BUILD_ROOT%{_sysconfdir}/pki/tls/misc/*.pl $RPM_BUILD_ROOT%{_bindir}
-mv $RPM_BUILD_ROOT%{_sysconfdir}/pki/tls/misc/tsget $RPM_BUILD_ROOT%{_bindir}
+mv $RPM_BUILD_ROOT%{_prefix}/ssl/misc/*.pl $RPM_BUILD_ROOT%{_bindir}
+mv $RPM_BUILD_ROOT%{_prefix}/ssl/misc/tsget $RPM_BUILD_ROOT%{_bindir}
 
 # Drop the SSLv3 methods from includes
 sed -i '/ifndef OPENSSL_NO_SSL3_METHOD/,+4d' $RPM_BUILD_ROOT%{_includedir}/openssl/ssl.h
@@ -359,19 +360,19 @@
 done
 popd
 
-mkdir -m755 $RPM_BUILD_ROOT%{_sysconfdir}/pki/CA
-mkdir -m700 $RPM_BUILD_ROOT%{_sysconfdir}/pki/CA/private
-mkdir -m755 $RPM_BUILD_ROOT%{_sysconfdir}/pki/CA/certs
-mkdir -m755 $RPM_BUILD_ROOT%{_sysconfdir}/pki/CA/crl
-mkdir -m755 $RPM_BUILD_ROOT%{_sysconfdir}/pki/CA/newcerts
+mkdir -m755 $RPM_BUILD_ROOT%{_prefix}/ssl/CA
+mkdir -m700 $RPM_BUILD_ROOT%{_prefix}/ssl/CA/private
+mkdir -m755 $RPM_BUILD_ROOT%{_prefix}/ssl/CA/certs
+mkdir -m755 $RPM_BUILD_ROOT%{_prefix}/ssl/CA/crl
+mkdir -m755 $RPM_BUILD_ROOT%{_prefix}/ssl/CA/newcerts
 
 # Ensure the config file timestamps are identical across builds to avoid
 # mulitlib conflicts and unnecessary renames on upgrade
-touch -r %{SOURCE2} $RPM_BUILD_ROOT%{_sysconfdir}/pki/tls/openssl.cnf
-touch -r %{SOURCE2} $RPM_BUILD_ROOT%{_sysconfdir}/pki/tls/ct_log_list.cnf
+touch -r %{SOURCE2} $RPM_BUILD_ROOT%{_prefix}/ssl/openssl.cnf
+touch -r %{SOURCE2} $RPM_BUILD_ROOT%{_prefix}/ssl/ct_log_list.cnf
 
-rm -f $RPM_BUILD_ROOT%{_sysconfdir}/pki/tls/openssl.cnf.dist
-rm -f $RPM_BUILD_ROOT%{_sysconfdir}/pki/tls/ct_log_list.cnf.dist
+rm -f $RPM_BUILD_ROOT%{_prefix}/ssl/openssl.cnf.dist
+rm -f $RPM_BUILD_ROOT%{_prefix}/ssl/ct_log_list.cnf.dist
 
 # Determine which arch opensslconf.h is going to try to #include.
 basearch=%{_arch}
@@ -418,12 +419,12 @@
 %files libs
 %{!?_licensedir:%global license %%doc}
 %license LICENSE
-%dir %{_sysconfdir}/pki/tls
-%dir %{_sysconfdir}/pki/tls/certs
-%dir %{_sysconfdir}/pki/tls/misc
-%dir %{_sysconfdir}/pki/tls/private
-%config(noreplace) %{_sysconfdir}/pki/tls/openssl.cnf
-%config(noreplace) %{_sysconfdir}/pki/tls/ct_log_list.cnf
+%dir %{_prefix}/ssl
+%dir %{_prefix}/ssl/certs
+%dir %{_prefix}/ssl/misc
+%dir %{_prefix}/ssl/private
+%config(noreplace) %{_prefix}/ssl/openssl.cnf
+%config(noreplace) %{_prefix}/ssl/ct_log_list.cnf
 %attr(0755,root,root) %{_libdir}/libcrypto.so.%{version}
 %attr(0755,root,root) %{_libdir}/libcrypto.so.%{soversion}
 %attr(0755,root,root) %{_libdir}/libssl.so.%{version}
@@ -450,11 +451,11 @@
 %{_mandir}/man1*/c_rehash*
 %{_mandir}/man1*/tsget*
 %{_mandir}/man1*/openssl-tsget*
-%dir %{_sysconfdir}/pki/CA
-%dir %{_sysconfdir}/pki/CA/private
-%dir %{_sysconfdir}/pki/CA/certs
-%dir %{_sysconfdir}/pki/CA/crl
-%dir %{_sysconfdir}/pki/CA/newcerts
+%dir %{_prefix}/ssl/CA
+%dir %{_prefix}/ssl/CA/private
+%dir %{_prefix}/ssl/CA/certs
+%dir %{_prefix}/ssl/CA/crl
+%dir %{_prefix}/ssl/CA/newcerts
 
 %post libs -p /sbin/ldconfig
 
